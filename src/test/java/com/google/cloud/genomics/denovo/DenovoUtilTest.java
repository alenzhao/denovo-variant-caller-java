package com.google.cloud.genomics.denovo;

import static com.google.cloud.genomics.denovo.DenovoUtil.Genotypes.AA;
import static com.google.cloud.genomics.denovo.DenovoUtil.Genotypes.AC;
import static com.google.cloud.genomics.denovo.DenovoUtil.Genotypes.AG;
import static com.google.cloud.genomics.denovo.DenovoUtil.Genotypes.AT;
import static com.google.cloud.genomics.denovo.DenovoUtil.Genotypes.CC;
import static com.google.cloud.genomics.denovo.DenovoUtil.Genotypes.CG;
import static com.google.cloud.genomics.denovo.DenovoUtil.Genotypes.CT;
import static com.google.cloud.genomics.denovo.DenovoUtil.Genotypes.GG;
import static com.google.cloud.genomics.denovo.DenovoUtil.Genotypes.TG;
import static com.google.cloud.genomics.denovo.DenovoUtil.Genotypes.TT;
import static org.junit.Assert.*;

import org.junit.Test;

import java.util.Arrays;

/**
 * TODO: Insert description here. (generated by smoitra)
 */
public class DenovoUtilTest {

  /**
   * Test method for {@link com.google.cloud.genomics.denovo.DenovoUtil#checkTrioGenoTypeIsDenovo(java.util.List)}.
   */
  @Test
  public void testCheckTrioGenoTypeIsDenovo() {
    
    // Denovo Inheritence cases
    assertEquals("TT|AA,AA", true,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AA, AA, TT)));
    assertEquals("AT|AA,AA", true,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AA, AA, AT)));
    assertEquals("TT|AA,AC", true,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AA, AC, TT)));
    assertEquals("CC|AA,AC", true,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AA, AC, CC)));
    assertEquals("AT|AA,AC", true,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AA, AC, AT)));
    assertEquals("AA|AA,CG", true,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AA, CG, AA)));
    assertEquals("GG|AC,TG", true,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AC, TG, GG)));
    assertEquals("AA|AC,TG", true,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AC, TG, AA)));
    assertEquals("AC|AC,TG", true,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AC, TG, AC)));
    assertEquals("TG|AC,TG", true,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AC, TG, TG)));

    // Normal Inheritence cases
    assertEquals("AT|AC,TG", false,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AC, TG, AT)));
    assertEquals("CT|AC,TG", false,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AC, TG, CT)));
    assertEquals("AG|AC,TG", false,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AC, TG, AG)));
    assertEquals("CG|AC,TG", false,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AC, TG, CG)));
    assertEquals("AA|AA,AC", false,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AA, AC, AA)));
    assertEquals("AC|AA,AC", false,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AA, AC, AC)));
    assertEquals("AC|AA,CG", true,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AA, CG, AA)));
    assertEquals("AG|AA,CG", true,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AA, CG, AA)));
    assertEquals("AA|AC,AC", false,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AC, AC, AA)));
    assertEquals("AC|AC,AC", false,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AC, AC, AC)));
    assertEquals("CC|AC,AC", false,
        DenovoUtil.checkTrioGenoTypeIsDenovo(Arrays.asList(AC, AC, CC)));
  }

}
