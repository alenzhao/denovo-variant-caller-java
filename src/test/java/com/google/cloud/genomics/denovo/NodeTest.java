package com.google.cloud.genomics.denovo;

import static org.junit.Assert.*;

import com.google.cloud.genomics.denovo.DenovoUtil.Genotypes;
import com.google.cloud.genomics.denovo.DenovoUtil.TrioIndividual;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * TODO: Insert description here. (generated by smoitra)
 */
public class NodeTest {

  private Map<List<Genotypes>, Double> conditionalProbabilityTable;
  private double EPS = 1e-12;

  /**
   * Test method for {@link com.google.cloud.genomics.denovo.Node#Node(java.lang.Object,
   * java.util.List, java.util.Map)}.
   */
  @Before
  public void setUp() {
    conditionalProbabilityTable = new HashMap<>();
    int numGenotypes = Genotypes.values().length;
    for (Genotypes genotype : Genotypes.values()) {
      conditionalProbabilityTable.put(Collections.singletonList(genotype),
          Double.valueOf(1.0 / numGenotypes));
    }

    // makes sure conditionalProbabilityTable is set up properly
    double totProb = 0.0;
    for (Double prob : conditionalProbabilityTable.values()) {
      totProb += prob;
    }
    assertTrue((totProb >= 1 - EPS && totProb <= 1 + EPS));
  }

  @After
  public void tearDown() {
    conditionalProbabilityTable = null;
  }

  @Test
  public void testSingleNode() {

    Node<TrioIndividual, Genotypes> dadNode =
        new Node<>(TrioIndividual.DAD, null, conditionalProbabilityTable);
    assertEquals(dadNode.id, TrioIndividual.DAD);
    assertEquals(dadNode.parents, null);
    assertEquals(dadNode.conditionalProbabilityTable, conditionalProbabilityTable);
  }

  @Test
  public void testLinkedNode() {

    Node<TrioIndividual, Genotypes> dadNode =
        new Node<>(TrioIndividual.DAD, null, conditionalProbabilityTable);

    Node<TrioIndividual, Genotypes> childNode = new Node<>(TrioIndividual.CHILD,
        Collections.singletonList(dadNode), conditionalProbabilityTable);

    assertEquals(dadNode.parents, null);
    assertEquals(childNode.parents.size(), 1);
    assertEquals(childNode.parents.get(0), dadNode);
  }
}
